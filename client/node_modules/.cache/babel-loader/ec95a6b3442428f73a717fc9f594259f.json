{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cyrie\\\\Documents\\\\Projets\\\\supergym\\\\client\\\\src\\\\pages\\\\Statistiques.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { LineChart, Line, XAxis, YAxis, Tooltip, CartesianGrid, ResponsiveContainer, BarChart, Bar } from \"recharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Statistiques = () => {\n  _s();\n  const [calendarData, setCalendarData] = useState([]);\n  const [seancesData, setSeancesData] = useState([]);\n  const [seancesParMois, setSeancesParMois] = useState([]);\n  const [seancesJanvier, setSeancesJanvier] = useState([]);\n\n  // Charger les données depuis les API\n  useEffect(() => {\n    const fetchCalendarData = fetch(\"http://localhost:5000/api/calendar\").then(res => {\n      if (!res.ok) throw new Error(`HTTP error! Status: ${res.status}`);\n      return res.json();\n    });\n    const fetchSeancesData = fetch(\"http://localhost:5000/api/seances\").then(res => {\n      if (!res.ok) throw new Error(`HTTP error! Status: ${res.status}`);\n      return res.json();\n    });\n    Promise.all([fetchCalendarData, fetchSeancesData]).then(([calendar, seances]) => {\n      setCalendarData(calendar);\n      setSeancesData(seances);\n\n      // Calculer les séances par mois\n      const seancesParMoisCalc = calendar.reduce((acc, item) => {\n        const month = new Date(item.date).getMonth();\n        acc[month] = acc[month] ? acc[month] + 1 : 1;\n        return acc;\n      }, Array(12).fill(0));\n      const formattedData = seancesParMoisCalc.map((count, index) => ({\n        mois: new Date(2025, index).toLocaleString(\"fr-FR\", {\n          month: \"long\"\n        }),\n        totalSeances: count\n      }));\n      setSeancesParMois(formattedData);\n\n      // Calculer les occurrences des séances uniquement pour janvier\n      const seancesEnJanvier = calendar.filter(item => new Date(item.date).getMonth() === 0);\n      const seancesCount = seancesEnJanvier.reduce((acc, item) => {\n        // Associer chaque date à une séance existante en utilisant seanceId\n        const seance = seances.find(s => s.id === item.seanceId);\n        const nom = seance ? seance.nom : \"Séance inconnue\";\n        acc[nom] = (acc[nom] || 0) + 1;\n        return acc;\n      }, {});\n      const formattedJanvierData = Object.keys(seancesCount).map(nom => ({\n        nom,\n        total: seancesCount[nom]\n      }));\n      setSeancesJanvier(formattedJanvierData);\n    }).catch(err => console.error(\"Erreur lors du chargement des données :\", err));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"seances-chart\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        color: \"white\"\n      },\n      children: \"Nombre total de s\\xE9ances par mois\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 400,\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: seancesParMois,\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"mois\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"totalSeances\",\n          stroke: \"#8884d8\",\n          strokeWidth: 2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n};\n_s(Statistiques, \"0lRYhAfZ5js+VcHdwkHosBNqO3g=\");\n_c = Statistiques;\nexport default Statistiques;\nvar _c;\n$RefreshReg$(_c, \"Statistiques\");","map":{"version":3,"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","Tooltip","CartesianGrid","ResponsiveContainer","BarChart","Bar","jsxDEV","_jsxDEV","Statistiques","_s","calendarData","setCalendarData","seancesData","setSeancesData","seancesParMois","setSeancesParMois","seancesJanvier","setSeancesJanvier","fetchCalendarData","fetch","then","res","ok","Error","status","json","fetchSeancesData","Promise","all","calendar","seances","seancesParMoisCalc","reduce","acc","item","month","Date","date","getMonth","Array","fill","formattedData","map","count","index","mois","toLocaleString","totalSeances","seancesEnJanvier","filter","seancesCount","seance","find","s","id","seanceId","nom","formattedJanvierData","Object","keys","total","catch","err","console","error","className","children","style","color","fileName","_jsxFileName","lineNumber","columnNumber","width","height","data","strokeDasharray","dataKey","type","stroke","strokeWidth","_c","$RefreshReg$"],"sources":["C:/Users/cyrie/Documents/Projets/supergym/client/src/pages/Statistiques.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    LineChart, Line, XAxis, YAxis, Tooltip, CartesianGrid, ResponsiveContainer, BarChart, Bar\r\n} from \"recharts\";\r\n\r\nconst Statistiques = () => {\r\n    const [calendarData, setCalendarData] = useState([]);\r\n    const [seancesData, setSeancesData] = useState([]);\r\n    const [seancesParMois, setSeancesParMois] = useState([]);\r\n    const [seancesJanvier, setSeancesJanvier] = useState([]);\r\n\r\n    // Charger les données depuis les API\r\n    useEffect(() => {\r\n        const fetchCalendarData = fetch(\"http://localhost:5000/api/calendar\").then((res) => {\r\n            if (!res.ok) throw new Error(`HTTP error! Status: ${res.status}`);\r\n            return res.json();\r\n        });\r\n\r\n        const fetchSeancesData = fetch(\"http://localhost:5000/api/seances\").then((res) => {\r\n            if (!res.ok) throw new Error(`HTTP error! Status: ${res.status}`);\r\n            return res.json();\r\n        });\r\n\r\n        Promise.all([fetchCalendarData, fetchSeancesData])\r\n            .then(([calendar, seances]) => {\r\n                setCalendarData(calendar);\r\n                setSeancesData(seances);\r\n\r\n                // Calculer les séances par mois\r\n                const seancesParMoisCalc = calendar.reduce((acc, item) => {\r\n                    const month = new Date(item.date).getMonth();\r\n                    acc[month] = acc[month] ? acc[month] + 1 : 1;\r\n                    return acc;\r\n                }, Array(12).fill(0));\r\n\r\n                const formattedData = seancesParMoisCalc.map((count, index) => ({\r\n                    mois: new Date(2025, index).toLocaleString(\"fr-FR\", { month: \"long\" }),\r\n                    totalSeances: count,\r\n                }));\r\n\r\n                setSeancesParMois(formattedData);\r\n\r\n                // Calculer les occurrences des séances uniquement pour janvier\r\n                const seancesEnJanvier = calendar.filter((item) => new Date(item.date).getMonth() === 0);\r\n\r\n                const seancesCount = seancesEnJanvier.reduce((acc, item) => {\r\n                    // Associer chaque date à une séance existante en utilisant seanceId\r\n                    const seance = seances.find((s) => s.id === item.seanceId);\r\n                    const nom = seance ? seance.nom : \"Séance inconnue\";\r\n                    acc[nom] = (acc[nom] || 0) + 1;\r\n                    return acc;\r\n                }, {});\r\n\r\n\r\n                const formattedJanvierData = Object.keys(seancesCount).map((nom) => ({\r\n                    nom,\r\n                    total: seancesCount[nom],\r\n                }));\r\n\r\n                setSeancesJanvier(formattedJanvierData);\r\n            })\r\n            .catch((err) => console.error(\"Erreur lors du chargement des données :\", err));\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"seances-chart\">\r\n            {/* Graphique des séances par mois */}\r\n            <h2 style={{ color: \"white\" }}>Nombre total de séances par mois</h2>\r\n            <ResponsiveContainer width=\"100%\" height={400}>\r\n                <LineChart data={seancesParMois}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"mois\" />\r\n                    <YAxis />\r\n                    <Tooltip />\r\n                    <Line type=\"monotone\" dataKey=\"totalSeances\" stroke=\"#8884d8\" strokeWidth={2} />\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Statistiques;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}