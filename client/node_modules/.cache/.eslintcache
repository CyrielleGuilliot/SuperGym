[{"C:\\Users\\cyrie\\Documents\\Projets\\supergym\\client\\src\\index.js":"1","C:\\Users\\cyrie\\Documents\\Projets\\supergym\\client\\src\\App.js":"2","C:\\Users\\cyrie\\Documents\\Projets\\supergym\\client\\src\\pages\\Calendar.js":"3","C:\\Users\\cyrie\\Documents\\Projets\\supergym\\client\\src\\pages\\Challenges.js":"4","C:\\Users\\cyrie\\Documents\\Projets\\supergym\\client\\src\\pages\\Statistiques.js":"5","C:\\Users\\cyrie\\Documents\\Projets\\supergym\\client\\src\\pages\\Exercices.js":"6","C:\\Users\\cyrie\\Documents\\Projets\\supergym\\client\\src\\components\\Navbar.js":"7","C:\\Users\\cyrie\\Documents\\Projets\\supergym\\client\\src\\pages\\Seances.js":"8"},{"size":207,"mtime":1740323912170,"results":"9","hashOfConfig":"10"},{"size":998,"mtime":1740324457795,"results":"11","hashOfConfig":"10"},{"size":7678,"mtime":1740252369043,"results":"12","hashOfConfig":"10"},{"size":5141,"mtime":1740330833513,"results":"13","hashOfConfig":"10"},{"size":4992,"mtime":1740252992696,"results":"14","hashOfConfig":"10"},{"size":6633,"mtime":1740253871111,"results":"15","hashOfConfig":"10"},{"size":1978,"mtime":1739980448155,"results":"16","hashOfConfig":"10"},{"size":7072,"mtime":1740096588819,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"hs70bd",{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\cyrie\\Documents\\Projets\\supergym\\client\\src\\index.js",[],["36","37"],"C:\\Users\\cyrie\\Documents\\Projets\\supergym\\client\\src\\App.js",[],"C:\\Users\\cyrie\\Documents\\Projets\\supergym\\client\\src\\pages\\Calendar.js",[],"C:\\Users\\cyrie\\Documents\\Projets\\supergym\\client\\src\\pages\\Challenges.js",[],"C:\\Users\\cyrie\\Documents\\Projets\\supergym\\client\\src\\pages\\Statistiques.js",["38"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    LineChart, Line, XAxis, YAxis, Tooltip, CartesianGrid, ResponsiveContainer, BarChart, Bar\r\n} from \"recharts\";\r\n\r\nconst Statistiques = () => {\r\n    const [calendarData, setCalendarData] = useState([]);\r\n    const [seancesData, setSeancesData] = useState([]);\r\n    const [seancesParMois, setSeancesParMois] = useState([]);\r\n    const [selectedMonth, setSelectedMonth] = useState(0);\r\n    const [seancesMois, setSeancesMois] = useState([]);\r\n\r\n    // Charger les données depuis les API\r\n    useEffect(() => {\r\n        const fetchCalendarData = fetch(\"http://localhost:5000/api/calendar\").then((res) => {\r\n            if (!res.ok) throw new Error(`HTTP error! Status: ${res.status}`);\r\n            return res.json();\r\n        });\r\n\r\n        const fetchSeancesData = fetch(\"http://localhost:5000/api/seances\").then((res) => {\r\n            if (!res.ok) throw new Error(`HTTP error! Status: ${res.status}`);\r\n            return res.json();\r\n        });\r\n\r\n        Promise.all([fetchCalendarData, fetchSeancesData])\r\n            .then(([calendar, seances]) => {\r\n                setCalendarData(calendar);\r\n                setSeancesData(seances);\r\n\r\n                // Calculer les séances par mois\r\n                const seancesParMoisCalc = calendar.reduce((acc, item) => {\r\n                    const month = new Date(item.date).getMonth();\r\n                    acc[month] = acc[month] ? acc[month] + 1 : 1;\r\n                    return acc;\r\n                }, Array(12).fill(0));\r\n\r\n                const formattedData = seancesParMoisCalc.map((count, index) => ({\r\n                    mois: new Date(2025, index).toLocaleString(\"fr-FR\", { month: \"long\" }),\r\n                    totalSeances: count,\r\n                }));\r\n\r\n                setSeancesParMois(formattedData);\r\n                updateSeancesMois(calendar, seances, selectedMonth);\r\n            })\r\n            .catch((err) => console.error(\"Erreur lors du chargement des données :\", err));\r\n    }, []);\r\n\r\n    // Met à jour les données du mois sélectionné\r\n    const updateSeancesMois = (calendar, seances, month) => {\r\n        const seancesFiltrees = calendar.filter((item) => new Date(item.date).getMonth() === month);\r\n        const seancesCount = seancesFiltrees.reduce((acc, item) => {\r\n            const seance = seances.find((s) => s.id === item.seanceId);\r\n            const nom = seance ? seance.nom : \"Séance inconnue\";\r\n            acc[nom] = (acc[nom] || 0) + 1;\r\n            return acc;\r\n        }, {});\r\n\r\n        const formattedData = Object.keys(seancesCount).map((nom) => ({\r\n            nom,\r\n            total: seancesCount[nom],\r\n        }));\r\n\r\n        setSeancesMois(formattedData);\r\n    };\r\n\r\n    const handlePrevMonth = () => {\r\n        const newMonth = (selectedMonth - 1 + 12) % 12;\r\n        setSelectedMonth(newMonth);\r\n        updateSeancesMois(calendarData, seancesData, newMonth);\r\n    };\r\n\r\n    const handleNextMonth = () => {\r\n        const newMonth = (selectedMonth + 1) % 12;\r\n        setSelectedMonth(newMonth);\r\n        updateSeancesMois(calendarData, seancesData, newMonth);\r\n    };\r\n\r\n    const monthNames = [\r\n        \"Janvier\", \"Février\", \"Mars\", \"Avril\", \"Mai\", \"Juin\",\r\n        \"Juillet\", \"Août\", \"Septembre\", \"Octobre\", \"Novembre\", \"Décembre\"\r\n    ];\r\n\r\n    return (\r\n        <div className=\"seances-chart\">\r\n            {/* Graphique des séances par mois */}\r\n            <h2 style={{ color: \"white\" }}>Nombre total de séances par mois</h2>\r\n            <ResponsiveContainer width=\"100%\" height={400}>\r\n                <LineChart data={seancesParMois}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"mois\" />\r\n                    <YAxis />\r\n                    <Tooltip />\r\n                    <Line type=\"monotone\" dataKey=\"totalSeances\" stroke=\"#8884d8\" strokeWidth={2} />\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n\r\n            {/* Répartition des séances du mois sélectionné */}\r\n            <div className=\"month-navigation\" style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"center\", marginTop: \"2rem\" }}>\r\n                <button onClick={handlePrevMonth}><ion-icon name=\"arrow-back-outline\"></ion-icon></button>\r\n                <h3 style={{ margin: \"0 1rem\", color: \"white\" }}>{monthNames[selectedMonth]}</h3>\r\n                <button onClick={handleNextMonth}><ion-icon name=\"arrow-forward-outline\"></ion-icon></button>\r\n            </div>\r\n            <ResponsiveContainer width=\"100%\" height={300}>\r\n                <BarChart data={seancesMois}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"nom\" />\r\n                    <YAxis />\r\n                    <Tooltip />\r\n                    <Bar dataKey=\"total\" fill=\"#82ca9d\" />\r\n                </BarChart>\r\n            </ResponsiveContainer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Statistiques;\r\n","C:\\Users\\cyrie\\Documents\\Projets\\supergym\\client\\src\\pages\\Exercices.js",[],"C:\\Users\\cyrie\\Documents\\Projets\\supergym\\client\\src\\components\\Navbar.js",[],"C:\\Users\\cyrie\\Documents\\Projets\\supergym\\client\\src\\pages\\Seances.js",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":46,"column":8,"nodeType":"45","endLine":46,"endColumn":10,"suggestions":"46"},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'selectedMonth'. Either include it or remove the dependency array.","ArrayExpression",["49"],"no-global-assign","no-unsafe-negation",{"desc":"50","fix":"51"},"Update the dependencies array to be: [selectedMonth]",{"range":"52","text":"53"},[2025,2027],"[selectedMonth]"]